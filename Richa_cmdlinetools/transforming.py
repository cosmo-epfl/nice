{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "import sys, os, argparse\n",
    "import ase.io as ase_io\n",
    "import numpy as np\n",
    "import tqdm\n",
    "import math\n",
    "from nice.blocks import *\n",
    "from nice.utilities import *\n",
    "\n",
    "def main():\n",
    "    \"\"\"\n",
    "    Command-line utility to compute NICE features given a precomputed pickle.\n",
    "    \"\"\"\n",
    "    # Tweak the autogenerated help output to look nicer\n",
    "    formatter = lambda prog: argparse.HelpFormatter(prog, max_help_position=22)\n",
    "    parser = argparse.ArgumentParser(description=main.__doc__, formatter_class=formatter)\n",
    "\n",
    "    parser.add_argument('input', type=str, default=\"\", nargs=\"?\",help='XYZ file to load')\n",
    "    parser.add_argument('-o', '--output', type=str, default=\"\",help='Output files prefix. Defaults to input filename with stripped extension')\n",
    "    parser.add_argument('--train_subset', type=str, default=\"0:10000\", help='Index for reading the file for training in ASE format')\n",
    "    parser.add_argument('--nice', type=str, default=\"nice.pickle\", help='Definition of the NICE contraction. Output from optimize_nice.py')\n",
    "    parser.add_argument('--blocks', type=int, default=1,help='Number of blocks to break the calculation into.')\n",
    "    \n",
    "    args = parser.parse_args()\n",
    "    \n",
    "    filename = args.input\n",
    "    output = args.output\n",
    "    select = args.train_subset   \n",
    "    nice = args.nice\n",
    "    nblocks = args.blocks\n",
    "    HARTREE_TO_EV = 27.211386245988\n",
    "    \n",
    "    if output == \"\":\n",
    "        output = os.path.splitext(filename)[0]\n",
    "        \n",
    "    print(\"Loading structures \", filename, \" frames: \", select)\n",
    "    train_structures = ase_io.read(filename, index=select)\n",
    "    all_species = get_all_species(train_structures)\n",
    "    \n",
    "    aa = pickle.load(open(nice, \"rb\"))\n",
    "    hypers = aa[\"HYPERS\"]\n",
    "    nice = aa[\"NICE\"]\n",
    "    \n",
    "    #Getting the features and energies\n",
    "    train_features = transform_sequentially(nice, train_structures, HYPERS, all_species)\n",
    "    \n",
    "    ''' getting compositional features suitable for linear regression which contains information\n",
    "    about the number of atoms with particular species in the structure\n",
    "    '''\n",
    "    train_c_features = get_compositional_features(train_structures, all_species)\n",
    "    train_features = np.concatenate([train_features, train_c_features], axis=1)\n",
    "    train_energies = [structure.info['U0'] for structure in train_structures]\n",
    "    train_energies = np.array(train_energies) * HARTREE_TO_EV\n",
    "    \n",
    "    pickle.dump( { \n",
    "               \"FEATURES\" : train_feature, \n",
    "               \"CFEATURES\": train_c_features,\n",
    "                \"ENERGIES\": train_energies,\n",
    "             }, open(output+\".pickle\", \"wb\"))\n",
    "\n",
    "        \n",
    "if __name__ == '__main__':\n",
    "    main()\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
